/* Program Name: Connect 4
 * Programmer: Arsh Ahluwalia
 * Date: August 2019
 */
package Connect4;

import javax.swing.ImageIcon;
import java.io.*; 
import javax.swing.JOptionPane; 
import java.util.ArrayList; 
import java.util.Random; 

/**
 * @author arsh
 */
public class Connect4 extends javax.swing.JFrame {
    
    ImageIcon red = new ImageIcon("red.png");
    ImageIcon yellow = new ImageIcon("yellow.png");
    ImageIcon blank = new ImageIcon("blank.png");
    
    String name = "";
    int numberOfTurns = 0;
    int selectedColumn = 0; 
    String[][] connectFourBoard = new String[6][7]; 
    ArrayList<String>nameScoreboard = new ArrayList<String>(); 
    ArrayList<Integer>Scoreboard = new ArrayList<Integer>(); 
    int[]cpuPickColumn = {0,1,2,3,4,5,6};  
    Random rand = new Random(); 
    Connect4Class cf = new Connect4Class(); 
    
    /**
     * Creates new form Connect4
     */
    public Connect4()
    {
        initComponents(); 
        frameMain.setVisible(true);
        frameMain.setSize(505, 495);
        frameMain.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameMain = new javax.swing.JFrame();
        pnlBackgroundMain = new java.awt.Panel();
        lblTitleMain = new javax.swing.JLabel();
        txtName = new java.awt.TextField();
        btnPlayMain = new java.awt.Button();
        btnCreditsMain = new java.awt.Button();
        btnInstructionsMain = new java.awt.Button();
        lblEnterNameMain = new java.awt.Label();
        btnExitMain = new java.awt.Button();
        frameInstructions = new javax.swing.JFrame();
        pnlBackgroundInstructions = new java.awt.Panel();
        lblInstructions = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInstructions = new javax.swing.JTextArea();
        btnBack = new java.awt.Button();
        frameCredits = new javax.swing.JFrame();
        pnlBackgroundCredits = new java.awt.Panel();
        lblCredits = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCredits = new javax.swing.JTextArea();
        btnBackCredits = new java.awt.Button();
        frameScoreboard = new javax.swing.JFrame();
        pnlBackgroundInstructions1 = new java.awt.Panel();
        lblInstructions1 = new java.awt.Label();
        btnExit1 = new java.awt.Button();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtScoreboard = new javax.swing.JTextArea();
        pnlBackground = new java.awt.Panel();
        btnColumn1 = new java.awt.Button();
        btnColumn2 = new java.awt.Button();
        btnColumn3 = new java.awt.Button();
        btnColumn4 = new java.awt.Button();
        btnColumn5 = new java.awt.Button();
        btnColumn6 = new java.awt.Button();
        btnColumn7 = new java.awt.Button();
        gameboard = new javax.swing.JLabel();
        slot7 = new javax.swing.JLabel();
        slot6 = new javax.swing.JLabel();
        slot5 = new javax.swing.JLabel();
        slot4 = new javax.swing.JLabel();
        slot3 = new javax.swing.JLabel();
        slot2 = new javax.swing.JLabel();
        slot1 = new javax.swing.JLabel();
        slot8 = new javax.swing.JLabel();
        slot9 = new javax.swing.JLabel();
        slot10 = new javax.swing.JLabel();
        slot11 = new javax.swing.JLabel();
        slot12 = new javax.swing.JLabel();
        slot13 = new javax.swing.JLabel();
        slot14 = new javax.swing.JLabel();
        slot15 = new javax.swing.JLabel();
        slot16 = new javax.swing.JLabel();
        slot17 = new javax.swing.JLabel();
        slot18 = new javax.swing.JLabel();
        slot19 = new javax.swing.JLabel();
        slot20 = new javax.swing.JLabel();
        slot21 = new javax.swing.JLabel();
        slot22 = new javax.swing.JLabel();
        slot23 = new javax.swing.JLabel();
        slot24 = new javax.swing.JLabel();
        slot25 = new javax.swing.JLabel();
        slot26 = new javax.swing.JLabel();
        slot27 = new javax.swing.JLabel();
        slot28 = new javax.swing.JLabel();
        slot29 = new javax.swing.JLabel();
        slot30 = new javax.swing.JLabel();
        slot31 = new javax.swing.JLabel();
        slot32 = new javax.swing.JLabel();
        slot33 = new javax.swing.JLabel();
        slot34 = new javax.swing.JLabel();
        slot35 = new javax.swing.JLabel();
        slot36 = new javax.swing.JLabel();
        slot37 = new javax.swing.JLabel();
        slot38 = new javax.swing.JLabel();
        slot39 = new javax.swing.JLabel();
        slot40 = new javax.swing.JLabel();
        slot41 = new javax.swing.JLabel();
        slot42 = new javax.swing.JLabel();
        btnBackToMain = new java.awt.Button();

        pnlBackgroundMain.setBackground(new java.awt.Color(153, 204, 255));

        lblTitleMain.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        lblTitleMain.setText("CONNECT FOUR");

        txtName.setBackground(new java.awt.Color(255, 255, 255));
        txtName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnPlayMain.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnPlayMain.setLabel("Play");
        btnPlayMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayMainActionPerformed(evt);
            }
        });

        btnCreditsMain.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnCreditsMain.setLabel("Credits");
        btnCreditsMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditsMainActionPerformed(evt);
            }
        });

        btnInstructionsMain.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnInstructionsMain.setLabel("Instructions");
        btnInstructionsMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstructionsMainActionPerformed(evt);
            }
        });

        lblEnterNameMain.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        lblEnterNameMain.setText("Enter A Nickname: ");

        btnExitMain.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnExitMain.setLabel("Exit");
        btnExitMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundMainLayout = new javax.swing.GroupLayout(pnlBackgroundMain);
        pnlBackgroundMain.setLayout(pnlBackgroundMainLayout);
        pnlBackgroundMainLayout.setHorizontalGroup(
            pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                .addGroup(pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitleMain)
                            .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                                .addComponent(btnInstructionsMain, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                                .addComponent(btnCreditsMain, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(lblEnterNameMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addGroup(pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExitMain, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlayMain, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66))
        );
        pnlBackgroundMainLayout.setVerticalGroup(
            pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundMainLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblTitleMain)
                .addGap(103, 103, 103)
                .addComponent(lblEnterNameMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnPlayMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(pnlBackgroundMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnInstructionsMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreditsMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnExitMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        javax.swing.GroupLayout frameMainLayout = new javax.swing.GroupLayout(frameMain.getContentPane());
        frameMain.getContentPane().setLayout(frameMainLayout);
        frameMainLayout.setHorizontalGroup(
            frameMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        frameMainLayout.setVerticalGroup(
            frameMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameMainLayout.createSequentialGroup()
                .addComponent(pnlBackgroundMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlBackgroundInstructions.setBackground(new java.awt.Color(153, 204, 255));

        lblInstructions.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lblInstructions.setText("Instructions");

        txtInstructions.setEditable(false);
        txtInstructions.setColumns(20);
        txtInstructions.setRows(5);
        txtInstructions.setText("Getting Started:\nPleanse enter a nickname before pressing play.\nThis is required for you to be on the scoreboard\n\nObjective:\nThe first part is to beat the computer by getting four \ncheckers in a row, iin a column or diagonally. \nThe second part is be achieving the least amount\nof turns to get four checkers in a row.\n\nHow To Play: \nPress the buttons at the top of the game board to\nselect which column you would like to choose. \n\n\n");
        jScrollPane1.setViewportView(txtInstructions);

        btnBack.setLabel("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundInstructionsLayout = new javax.swing.GroupLayout(pnlBackgroundInstructions);
        pnlBackgroundInstructions.setLayout(pnlBackgroundInstructionsLayout);
        pnlBackgroundInstructionsLayout.setHorizontalGroup(
            pnlBackgroundInstructionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(225, 225, 225))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructionsLayout.createSequentialGroup()
                .addGap(0, 173, Short.MAX_VALUE)
                .addComponent(lblInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
            .addGroup(pnlBackgroundInstructionsLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBackgroundInstructionsLayout.setVerticalGroup(
            pnlBackgroundInstructionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundInstructionsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout frameInstructionsLayout = new javax.swing.GroupLayout(frameInstructions.getContentPane());
        frameInstructions.getContentPane().setLayout(frameInstructionsLayout);
        frameInstructionsLayout.setHorizontalGroup(
            frameInstructionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        frameInstructionsLayout.setVerticalGroup(
            frameInstructionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlBackgroundCredits.setBackground(new java.awt.Color(153, 204, 255));

        lblCredits.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lblCredits.setText("Credits");

        txtCredits.setEditable(false);
        txtCredits.setColumns(20);
        txtCredits.setRows(5);
        txtCredits.setText("\n\n                    \n\n\t     Arsh Ahluwalia");
        jScrollPane2.setViewportView(txtCredits);

        btnBackCredits.setLabel("Back");
        btnBackCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackCreditsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundCreditsLayout = new javax.swing.GroupLayout(pnlBackgroundCredits);
        pnlBackgroundCredits.setLayout(pnlBackgroundCreditsLayout);
        pnlBackgroundCreditsLayout.setHorizontalGroup(
            pnlBackgroundCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundCreditsLayout.createSequentialGroup()
                .addGroup(pnlBackgroundCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundCreditsLayout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(lblCredits))
                    .addGroup(pnlBackgroundCreditsLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackgroundCreditsLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(btnBackCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        pnlBackgroundCreditsLayout.setVerticalGroup(
            pnlBackgroundCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundCreditsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblCredits)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnBackCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout frameCreditsLayout = new javax.swing.GroupLayout(frameCredits.getContentPane());
        frameCredits.getContentPane().setLayout(frameCreditsLayout);
        frameCreditsLayout.setHorizontalGroup(
            frameCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundCredits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        frameCreditsLayout.setVerticalGroup(
            frameCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundCredits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlBackgroundInstructions1.setBackground(new java.awt.Color(153, 204, 255));
        pnlBackgroundInstructions1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lblInstructions1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lblInstructions1.setText("ScoreBoard");

        btnExit1.setLabel("Exit");
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        jScrollPane4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        txtScoreboard.setColumns(20);
        txtScoreboard.setRows(5);
        jScrollPane4.setViewportView(txtScoreboard);

        javax.swing.GroupLayout pnlBackgroundInstructions1Layout = new javax.swing.GroupLayout(pnlBackgroundInstructions1);
        pnlBackgroundInstructions1.setLayout(pnlBackgroundInstructions1Layout);
        pnlBackgroundInstructions1Layout.setHorizontalGroup(
            pnlBackgroundInstructions1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructions1Layout.createSequentialGroup()
                .addGap(0, 162, Short.MAX_VALUE)
                .addComponent(lblInstructions1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructions1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlBackgroundInstructions1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructions1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundInstructions1Layout.createSequentialGroup()
                        .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217))))
        );
        pnlBackgroundInstructions1Layout.setVerticalGroup(
            pnlBackgroundInstructions1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundInstructions1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblInstructions1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout frameScoreboardLayout = new javax.swing.GroupLayout(frameScoreboard.getContentPane());
        frameScoreboard.getContentPane().setLayout(frameScoreboardLayout);
        frameScoreboardLayout.setHorizontalGroup(
            frameScoreboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundInstructions1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        frameScoreboardLayout.setVerticalGroup(
            frameScoreboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundInstructions1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlBackground.setBackground(new java.awt.Color(153, 204, 255));
        pnlBackground.setMinimumSize(new java.awt.Dimension(858, 697));
        pnlBackground.setPreferredSize(new java.awt.Dimension(858, 697));
        pnlBackground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnColumn1.setLabel("Column 1");
        btnColumn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn1ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        btnColumn2.setLabel("Column 2");
        btnColumn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn2ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        btnColumn3.setLabel("Column 3");
        btnColumn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn3ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));

        btnColumn4.setLabel("Column 4");
        btnColumn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn4ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        btnColumn5.setLabel("Column 5");
        btnColumn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn5ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, -1, -1));

        btnColumn6.setLabel("Column 6");
        btnColumn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn6ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, -1, -1));

        btnColumn7.setLabel("Column 7");
        btnColumn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn7ActionPerformed(evt);
            }
        });
        pnlBackground.add(btnColumn7, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 20, -1, -1));

        gameboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/board.png"))); // NOI18N
        gameboard.setText("jLabel1");
        gameboard.setFocusable(false);
        pnlBackground.add(gameboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 770, 510));

        slot7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot7, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 80, 80));

        slot6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot6, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 70, 80, 80));

        slot5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 80, 80));

        slot4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 80, 80));

        slot3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 70, 80, 80));

        slot2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 80, 80));

        slot1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 70, 80, 80));

        slot8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot8, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 150, 80, 80));

        slot9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot9, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, 80, 80));

        slot10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot10, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 150, 80, 80));

        slot11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot11, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 80, 80));

        slot12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot12, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 80, 80));

        slot13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot13, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 150, 80, 80));

        slot14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot14, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, 80, 80));

        slot15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot15, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 225, 80, 80));

        slot16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot16, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 225, 80, 80));

        slot17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot17, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 225, 80, 80));

        slot18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot18, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 225, 80, 80));

        slot19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot19, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 225, 80, 80));

        slot20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot20, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 225, 80, 80));

        slot21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot21, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 225, 80, 80));

        slot22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot22, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 300, 80, 80));

        slot23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot23, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 80, 80));

        slot24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot24, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 300, 80, 80));

        slot25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot25, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 80, 80));

        slot26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot26, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 300, 80, 80));

        slot27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot27, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 300, 80, 80));

        slot28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot28, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 300, 80, 80));

        slot29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot29, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 380, 80, 80));

        slot30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot30, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 80, 80));

        slot31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot31, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 380, 80, 80));

        slot32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot32, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 380, 80, 80));

        slot33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot33, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, 80, 80));

        slot34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot34, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 380, 80, 80));

        slot35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot35, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, 80, 80));

        slot36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot36, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 458, 80, 80));

        slot37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot37, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 458, 80, 80));

        slot38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot38, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 458, 80, 80));

        slot39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot39, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 458, 80, 80));

        slot40.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot40, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 458, 80, 80));

        slot41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot41, new org.netbeans.lib.awtextra.AbsoluteConstraints(602, 458, 80, 80));

        slot42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect4/blank.png"))); // NOI18N
        pnlBackground.add(slot42, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 458, 80, 80));

        btnBackToMain.setLabel("Back to Main Menu");
        btnBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMainActionPerformed(evt);
            }
        });
        pnlBackground.add(btnBackToMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 610, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void btnColumn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn1ActionPerformed
        selectedColumn = 0; 
        
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }
        
        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 
        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            cpuPickColumn[0]=-1; 
            btnColumn1.setVisible(false);
        }
        
        int winner = cf.checkForWin(connectFourBoard);
        
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
        
        {
            int min = 0; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt(2+1)];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            }
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
            
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);
            
            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            } 
        }
    }//GEN-LAST:event_btnColumn1ActionPerformed

    private void btnColumn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn2ActionPerformed
 
        
        selectedColumn = 1; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }

        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 
   
        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn2.setVisible(false);
        }
        
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
        
        {
   
            int min = 0; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt(3+1)];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            }
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btnColumn2ActionPerformed

    private void btnColumn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn3ActionPerformed
         
        selectedColumn = 2; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }

        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 

        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn3.setVisible(false);
        }
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
         
        {
   
            int min = 0; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt(max+1)];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            } 
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btnColumn3ActionPerformed

    private void btnColumn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn4ActionPerformed
        
        selectedColumn = 3; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }

        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 

        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn4.setVisible(false);
        }
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }

        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
         
        {
   
            int min = 0; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt(max+1)];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            } 
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btnColumn4ActionPerformed

    private void btnColumn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn5ActionPerformed
        
        selectedColumn = 4; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }

        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 

        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn5.setVisible(false);
        }
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
        
        {
   
            int min = 0; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt(max+1)];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            } 
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btnColumn5ActionPerformed
 
    private void btnColumn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn6ActionPerformed
        
        selectedColumn = 5; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }
        
        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 

        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn6.setVisible(false);
        }
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "No One Wins!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
 
        {
   
            int min = 3; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt((max-min)+1)+min];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            } 
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btnColumn6ActionPerformed
    
    private void btnColumn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn7ActionPerformed

        selectedColumn = 6; 
        int row = cf.ConnectFourClass(connectFourBoard, selectedColumn);
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(gameboard, "An Error Has Occured");
        }

        numberOfTurns++; 
        connectFourBoard[row][selectedColumn] = "Y";
        ChangeToYellow(row, selectedColumn); 

        
        boolean isColumnFull = cf.columnFull(connectFourBoard, selectedColumn); 
        
        if(isColumnFull == true)
        {
            btnColumn7.setVisible(false);
        }
        int winner = cf.checkForWin(connectFourBoard);
               
        if(winner == 1)
        {
            JOptionPane.showMessageDialog(gameboard, "Congratulations, you win!");
            
            boolean setup = winScoreboardSetup(); 
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            
        }
        else if(winner == 3)
        {
            JOptionPane.showMessageDialog(gameboard, "It's a tie!");
            
            boolean setup = ScoreboardSetup();
            
            this.setVisible(false); 
            frameScoreboard.setVisible(true); 
            frameScoreboard.setSize(530, 630);
            frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        }
 
        {
   
            int min = 4; 
            int max = cpuPickColumn.length-1; 
            int columnPicked;
            
            while(true)
            {
                columnPicked = cpuPickColumn[rand.nextInt((max-min)+1)+min];  
                
                if(columnPicked != -1)
                {
                    break; 
                }
            } 
            
            row = cf.ConnectFourClass(connectFourBoard, columnPicked);
            connectFourBoard[row][columnPicked] = "R";
            ChangeToRed(row, columnPicked); 
            
            isColumnFull = cf.columnFull(connectFourBoard, columnPicked); 
        
            if(isColumnFull == true && columnPicked == 0)
            {
                cpuPickColumn[0] = -1; 
                btnColumn1.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 1)
            {
                cpuPickColumn[1] = -1; 
                btnColumn2.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 2)
            {
                cpuPickColumn[2] = -1; 
                btnColumn3.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 3)
            {
                cpuPickColumn[3] = -1; 
                btnColumn4.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 4)
            {
                cpuPickColumn[4] = -1; 
                btnColumn5.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 5)
            {
                cpuPickColumn[5] = -1; 
                btnColumn6.setVisible(false);
            }
            if(isColumnFull == true && columnPicked == 6)
            {
                cpuPickColumn[6] = -1; 
                btnColumn7.setVisible(false);
            }
            
            winner = cf.checkForWin(connectFourBoard);

            if(winner == 2)
            {
                JOptionPane.showMessageDialog(gameboard, "The computer wins, better luck next time!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else if(winner == 3)
            {
                JOptionPane.showMessageDialog(gameboard, "It's a tie!");

                boolean setup = ScoreboardSetup();

                this.setVisible(false); 
                frameScoreboard.setVisible(true); 
                frameScoreboard.setSize(530, 630);
                frameScoreboard.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }  
        }
    }//GEN-LAST:event_btnColumn7ActionPerformed

    private void btnPlayMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayMainActionPerformed
        
        name = txtName.getText(); 
        txtName.setText(name);
        
        for(int row = 0; row <= 5; row ++)
        {
            for(int col = 0; col <= 6; col ++)
            {
                connectFourBoard[row][col]= "O";       
            }
        }
                
        if(!(txtName.getText().equals("")))
        {
            //changes to other JFrame
            this.setVisible(true);
            //this.setSize(858, 697);
            this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            frameMain.dispose();    
        }
        else
        {
            JOptionPane.showMessageDialog(frameMain, "Please enter a nickname to get started");
        }
    }//GEN-LAST:event_btnPlayMainActionPerformed

    private void btnInstructionsMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstructionsMainActionPerformed
        String name = txtName.getText(); 
        txtName.setText(name);
        
        frameInstructions.setVisible(true);
        frameInstructions.setSize(530, 630);
        frameInstructions.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        frameMain.dispose(); 
    }//GEN-LAST:event_btnInstructionsMainActionPerformed

    private void btnCreditsMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditsMainActionPerformed
        String name = txtName.getText(); 
        txtName.setText(name);
        
        frameCredits.setVisible(true);
        frameCredits.setSize(550, 400);
        frameCredits.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        frameMain.dispose(); 
    }//GEN-LAST:event_btnCreditsMainActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        frameMain.setVisible(true);
        frameMain.setSize(505, 495);
        frameMain.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        frameInstructions.dispose();
    }//GEN-LAST:event_btnBackActionPerformed
    
    private void btnBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMainActionPerformed
        numberOfTurns = 0;
        selectedColumn = 0; 
        cpuPickColumn[0] = 0;
        cpuPickColumn[1] = 1;
        cpuPickColumn[2] = 2;
        cpuPickColumn[3] = 3;
        cpuPickColumn[4] = 4;
        cpuPickColumn[5] = 5;
        cpuPickColumn[6] = 6;
        
        slot1.setIcon(blank);
        slot2.setIcon(blank);
        slot3.setIcon(blank); 
        slot4.setIcon(blank); 
        slot5.setIcon(blank); 
        slot6.setIcon(blank); 
        slot7.setIcon(blank);
        slot8.setIcon(blank); 
        slot9.setIcon(blank); 
        slot10.setIcon(blank); 
        slot11.setIcon(blank); 
        slot12.setIcon(blank); 
        slot13.setIcon(blank); 
        slot14.setIcon(blank);
        slot15.setIcon(blank); 
        slot16.setIcon(blank); 
        slot17.setIcon(blank); 
        slot18.setIcon(blank); 
        slot18.setIcon(blank); 
        slot20.setIcon(blank); 
        slot21.setIcon(blank);
        slot22.setIcon(blank); 
        slot23.setIcon(blank); 
        slot24.setIcon(blank); 
        slot25.setIcon(blank); 
        slot26.setIcon(blank); 
        slot27.setIcon(blank); 
        slot28.setIcon(blank);
        slot29.setIcon(blank); 
        slot30.setIcon(blank); 
        slot31.setIcon(blank); 
        slot32.setIcon(blank); 
        slot33.setIcon(blank); 
        slot34.setIcon(blank); 
        slot35.setIcon(blank);
        slot36.setIcon(blank); 
        slot37.setIcon(blank); 
        slot38.setIcon(blank); 
        slot39.setIcon(blank); 
        slot40.setIcon(blank); 
        slot41.setIcon(blank); 
        slot42.setIcon(blank);
        
        frameMain.setVisible(true);
        frameMain.setSize(505, 495);
        frameMain.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
        
        this.setVisible(false); 
    }//GEN-LAST:event_btnBackToMainActionPerformed

    private void btnBackCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackCreditsActionPerformed
        frameMain.setVisible(true);
        frameMain.setSize(505, 495);
        frameMain.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        frameCredits.dispose();
    }//GEN-LAST:event_btnBackCreditsActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void btnExitMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitMainActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitMainActionPerformed
    
    private void ChangeToRed(int row, int col)
    {
        switch (col)
        {
            case 0: 
                    switch (row)
                    {
                        case 0: slot1.setIcon(red); break;
                        case 1: slot8.setIcon(red); break;
                        case 2: slot15.setIcon(red); break;
                        case 3: slot22.setIcon(red); break;
                        case 4: slot29.setIcon(red); break;
                        case 5: slot36.setIcon(red); break;
                    }
                    break;
            case 1: 
                    switch (row)
                    {
                        case 0: slot2.setIcon(red); break;
                        case 1: slot9.setIcon(red); break;
                        case 2: slot16.setIcon(red); break;
                        case 3: slot23.setIcon(red); break;
                        case 4: slot30.setIcon(red); break;
                        case 5: slot37.setIcon(red); break;
                    }
                    break;
                
            case 2:
                    switch (row)
                    {
                        case 0: slot3.setIcon(red); break;
                        case 1: slot10.setIcon(red); break;
                        case 2: slot17.setIcon(red); break;
                        case 3: slot24.setIcon(red); break;
                        case 4: slot31.setIcon(red); break;
                        case 5: slot38.setIcon(red); break;
                    }
                    break;
                
            case 3:
                    switch (row)
                    {
                        case 0: slot4.setIcon(red); break;
                        case 1: slot11.setIcon(red); break;
                        case 2: slot18.setIcon(red); break;
                        case 3: slot25.setIcon(red); break;
                        case 4: slot32.setIcon(red); break;
                        case 5: slot39.setIcon(red); break;
                    }
                    break;
                
            case 4:
                    switch (row)
                    {
                        case 0: slot5.setIcon(red); break;
                        case 1: slot12.setIcon(red); break;
                        case 2: slot19.setIcon(red); break;
                        case 3: slot26.setIcon(red); break;
                        case 4: slot33.setIcon(red); break;
                        case 5: slot40.setIcon(red); break;
                    }
                    break;
                
            case 5:
                    switch (row)
                    {
                        case 0: slot6.setIcon(red); break;
                        case 1: slot13.setIcon(red); break;
                        case 2: slot20.setIcon(red); break;
                        case 3: slot27.setIcon(red); break;
                        case 4: slot34.setIcon(red); break;
                        case 5: slot41.setIcon(red); break;
                    }
                    break;
                
            case 6: 
                    switch (row)
                    {
                        case 0: slot7.setIcon(red); break;
                        case 1: slot14.setIcon(red); break;
                        case 2: slot21.setIcon(red); break;
                        case 3: slot28.setIcon(red); break;
                        case 4: slot35.setIcon(red); break;
                        case 5: slot42.setIcon(red); break;
                    }
                    break;
        }
    }
    
    private void ChangeToYellow(int row, int col)
    {
        switch (col)
        {
            case 0: 
                    switch (row)
                    {
                        case 0: slot1.setIcon(yellow); break;
                        case 1: slot8.setIcon(yellow); break;
                        case 2: slot15.setIcon(yellow); break;
                        case 3: slot22.setIcon(yellow); break;
                        case 4: slot29.setIcon(yellow); break;
                        case 5: slot36.setIcon(yellow); break;
                    }
                    break;
            case 1: 
                    switch (row)
                    {
                        case 0: slot2.setIcon(yellow); break;
                        case 1: slot9.setIcon(yellow); break;
                        case 2: slot16.setIcon(yellow); break;
                        case 3: slot23.setIcon(yellow); break;
                        case 4: slot30.setIcon(yellow); break;
                        case 5: slot37.setIcon(yellow); break;
                    }
                    break;
                
            case 2:
                    switch (row)
                    {
                        case 0: slot3.setIcon(yellow); break;
                        case 1: slot10.setIcon(yellow); break;
                        case 2: slot17.setIcon(yellow); break;
                        case 3: slot24.setIcon(yellow); break;
                        case 4: slot31.setIcon(yellow); break;
                        case 5: slot38.setIcon(yellow); break;
                    }
                    break;
                
            case 3:
                    switch (row)
                    {
                        case 0: slot4.setIcon(yellow); break;
                        case 1: slot11.setIcon(yellow); break;
                        case 2: slot18.setIcon(yellow); break;
                        case 3: slot25.setIcon(yellow); break;
                        case 4: slot32.setIcon(yellow); break;
                        case 5: slot39.setIcon(yellow); break;
                    }
                    break;
                
            case 4:
                    switch (row)
                    {
                        case 0: slot5.setIcon(yellow); break;
                        case 1: slot12.setIcon(yellow); break;
                        case 2: slot19.setIcon(yellow); break;
                        case 3: slot26.setIcon(yellow); break;
                        case 4: slot33.setIcon(yellow); break;
                        case 5: slot40.setIcon(yellow); break;
                    }
                    break;
                
            case 5:
                    switch (row)
                    {
                        case 0: slot6.setIcon(yellow); break;
                        case 1: slot13.setIcon(yellow); break;
                        case 2: slot20.setIcon(yellow); break;
                        case 3: slot27.setIcon(yellow); break;
                        case 4: slot34.setIcon(yellow); break;
                        case 5: slot41.setIcon(yellow); break;
                    }
                    break;
                
            case 6: 
                    switch (row)
                    {
                        case 0: slot7.setIcon(yellow); break;
                        case 1: slot14.setIcon(yellow); break;
                        case 2: slot21.setIcon(yellow); break;
                        case 3: slot28.setIcon(yellow); break;
                        case 4: slot35.setIcon(yellow); break;
                        case 5: slot42.setIcon(yellow); break;
                    }
                    break;
        }
    }
    
    private boolean winScoreboardSetup()
    {
        txtScoreboard.setText("");
        
        String word;
        int counter = 0; 
        
        try
        {
            FileReader read = new FileReader("scoreboard.txt"); 
            BufferedReader readFile = new BufferedReader(read);  
            
            while ((word = readFile.readLine()) != null) 
            {
                 counter++;
                 
                 if(counter%2 == 0)
                 {
                     Scoreboard.add(Integer.parseInt(word)); 
                 }
                 else
                 {
                     nameScoreboard.add(word);
                 }
            }
        }
        catch (IOException e) 
         {               
                 System.out.println("Problem reading file.");
                 System.err.println("IOException: " + e.getMessage());
         }
        
        nameScoreboard.add(name); 
        Scoreboard.add(numberOfTurns);
        
        for(int i = 0; i <= nameScoreboard.size()-1; i++)
        {
            if(nameScoreboard.get(i).equals(""))
            {
                nameScoreboard.remove(i); 
            }
        }
        int[] tempArray1 = new int[Scoreboard.size()]; 
        String[] tempArray2 = new String[nameScoreboard.size()]; 
        
        for(int i = 0; i <= Scoreboard.size()-1; i ++)
        {
            tempArray1[i] = Scoreboard.get(i);
        }
        nameScoreboard.toArray(tempArray2); 
        
        
        {
            int IntTemp = 0;

            String stringTemp = null; 

            for(int x = 0; x <= tempArray1.length-1; x++)
            {       
                for(int y = 1; y <= tempArray1.length-1; y++)
                {   
                    if(tempArray1[y-1] > tempArray1[y])
                    {
                        IntTemp = tempArray1[y-1];
                        stringTemp = tempArray2[y-1];
                        tempArray1[y-1] = tempArray1[y];
                        tempArray2[y-1] = tempArray2[y];
                        tempArray1[y] = IntTemp;
                        tempArray2[y] = stringTemp; 
                    }
                }  
            }
        }
        
        for(int i = 0; i  <= tempArray1.length-1; i++)
        {
            txtScoreboard.setText(txtScoreboard.getText()+"    "+(i+1)+": "+tempArray2[i]+" - "+tempArray1[i]+"\n"); 
        }
        
        try
        {
            FileWriter write = new FileWriter("scoreboard.txt"); 
            BufferedWriter writeFile = new BufferedWriter(write);  
            
            for(int i = 0; i <= tempArray1.length-1; i++) 
            {
                if(tempArray1.length <= 20)
                {
                    writeFile.write(tempArray2[i]); 
                    writeFile.newLine(); 
                    writeFile.write(Integer.toString(tempArray1[i])); 
                    writeFile.newLine(); 
                } 
            }
            
            writeFile.close(); 
        }
        catch (IOException e) 
         {               
                 System.out.println("Problem reading file.");
                 System.err.println("IOException: " + e.getMessage());
         }
        
        return true; 
    }
    
    private boolean ScoreboardSetup()
    {
        txtScoreboard.setText("");
        
        String word;
        int counter = 0; 
        
        try
        {
            FileReader read = new FileReader("scoreboard.txt"); 
            BufferedReader readFile = new BufferedReader(read);  
                    
            while ((word = readFile.readLine()) != null) 
            {
                 counter++;
                 
                 if(counter%2 == 0)
                 {
                     Scoreboard.add(Integer.parseInt(word)); 
                   
                 }
                 else
                 {
                     nameScoreboard.add(word);
                     
                 }
            }
        }
        catch (IOException e) 
         {               
                 System.out.println("Problem reading file.");
                 System.err.println("IOException: " + e.getMessage());
         }
        
        for(int i = 0; i  <= Scoreboard.size()-1; i++)
        {
            txtScoreboard.setText(txtScoreboard.getText()+"    "+(i+1)+": "+nameScoreboard.get(i)+" - "+Scoreboard.get(i)+"\n"); 
        }
        
        return true; 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Connect4().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnBack;
    private java.awt.Button btnBackCredits;
    private java.awt.Button btnBackToMain;
    private java.awt.Button btnColumn1;
    private java.awt.Button btnColumn2;
    private java.awt.Button btnColumn3;
    private java.awt.Button btnColumn4;
    private java.awt.Button btnColumn5;
    private java.awt.Button btnColumn6;
    private java.awt.Button btnColumn7;
    private java.awt.Button btnCreditsMain;
    private java.awt.Button btnExit1;
    private java.awt.Button btnExitMain;
    private java.awt.Button btnInstructionsMain;
    private java.awt.Button btnPlayMain;
    private javax.swing.JFrame frameCredits;
    private javax.swing.JFrame frameInstructions;
    private javax.swing.JFrame frameMain;
    private javax.swing.JFrame frameScoreboard;
    private javax.swing.JLabel gameboard;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCredits;
    private java.awt.Label lblEnterNameMain;
    private java.awt.Label lblInstructions;
    private java.awt.Label lblInstructions1;
    private javax.swing.JLabel lblTitleMain;
    private java.awt.Panel pnlBackground;
    private java.awt.Panel pnlBackgroundCredits;
    private java.awt.Panel pnlBackgroundInstructions;
    private java.awt.Panel pnlBackgroundInstructions1;
    private java.awt.Panel pnlBackgroundMain;
    private javax.swing.JLabel slot1;
    private javax.swing.JLabel slot10;
    private javax.swing.JLabel slot11;
    private javax.swing.JLabel slot12;
    private javax.swing.JLabel slot13;
    private javax.swing.JLabel slot14;
    private javax.swing.JLabel slot15;
    private javax.swing.JLabel slot16;
    private javax.swing.JLabel slot17;
    private javax.swing.JLabel slot18;
    private javax.swing.JLabel slot19;
    private javax.swing.JLabel slot2;
    private javax.swing.JLabel slot20;
    private javax.swing.JLabel slot21;
    private javax.swing.JLabel slot22;
    private javax.swing.JLabel slot23;
    private javax.swing.JLabel slot24;
    private javax.swing.JLabel slot25;
    private javax.swing.JLabel slot26;
    private javax.swing.JLabel slot27;
    private javax.swing.JLabel slot28;
    private javax.swing.JLabel slot29;
    private javax.swing.JLabel slot3;
    private javax.swing.JLabel slot30;
    private javax.swing.JLabel slot31;
    private javax.swing.JLabel slot32;
    private javax.swing.JLabel slot33;
    private javax.swing.JLabel slot34;
    private javax.swing.JLabel slot35;
    private javax.swing.JLabel slot36;
    private javax.swing.JLabel slot37;
    private javax.swing.JLabel slot38;
    private javax.swing.JLabel slot39;
    private javax.swing.JLabel slot4;
    private javax.swing.JLabel slot40;
    private javax.swing.JLabel slot41;
    private javax.swing.JLabel slot42;
    private javax.swing.JLabel slot5;
    private javax.swing.JLabel slot6;
    private javax.swing.JLabel slot7;
    private javax.swing.JLabel slot8;
    private javax.swing.JLabel slot9;
    private javax.swing.JTextArea txtCredits;
    private javax.swing.JTextArea txtInstructions;
    private java.awt.TextField txtName;
    private javax.swing.JTextArea txtScoreboard;
    // End of variables declaration//GEN-END:variables
}
